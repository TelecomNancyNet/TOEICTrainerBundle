{% extends 'TOEICTrainerBundle::base.html.twig' %}

{% form_theme form _self %}

{% block body -%}
    <h1>DocHoles creation</h1>

    {# 
    {{ form(form) }}
	#}

	{{ form_start(form) }}
    {# render the task's only field: document #}
    {{ form_row(form.document) }}

    <div class="panel panel-primary">
        <div class="panel-heading">
            <p>Selected document</p>
        </div>
        <div class="panel-body">
            <p id="document_text"></p>
        </div>
    </div>

    <h3>Document holes</h3>
    <ul class="wordDocHoles" data-prototype="{{ form_widget(form.wordDocHoles.vars.prototype)|e }}" >
        {# iterate over each existing address and render some fields: city #}
        {% for wordHoles in form.wordDocHoles %}
            <li>
                <ul>
		        	<li>{{ form_row(wordHoles) }}</li>
		        </ul> <br />
		    </li>
        {% endfor %}
    </ul>

    {{ form_row(form.submit) }} <br />

    <div style="display: none">
	{{ form_end(form) }}
    </div>

    <ul class="record_actions">
        <li>
            <a href="{{ path('docholes') }}">
                Back to the list
            </a>
        </li>
    </ul>
{% endblock %}

{% block javascripts %}
<script type="text/javascript">
function addToolTips(text)
{
    exploded = text.split(' ');
    newText = "";

    for(var i = 0; i < exploded.length; i++)
    {
        exploded[i] = "<span data-toggle='tooltip' title='word " + (i) + "' number='" + i + "'>" + exploded[i] + "</span> ";
        newText = newText + exploded[i];
    }

    return newText;
}

function switchDoc(value)
{
    // get the value back
    var e = document.getElementById("tn_toeictrainerbundle_docholes_document");
    var strUser = e.options[e.selectedIndex].text;

    strUser = addToolTips(strUser);

    // input it in the div id document_text
    $('#document_text').text("");
    $('#document_text').append(strUser);
}


function addHoleForm($collectionHolder, $newLinkLi) {
    // Get the data-prototype explained earlier
    var prototype = $collectionHolder.data('prototype');

    // get the new index
    var index = $collectionHolder.data('index');

    // Replace '__name__' in the prototype's HTML to
    // instead be a number based on how many items we have
    var newForm = prototype.replace(/__name__/g, index);

    // increase the index with one for the next item
    $collectionHolder.data('index', index + 1);

    // Display the form in the page in an li, before the "Add a tag" link li
    var $newFormLi = $('<li></li>').append(newForm);
    $newLinkLi.before($newFormLi);
}

function addHoleFormDeleteLink($tagFormLi) {
    var $removeFormA = $('<a href="#">delete this tag</a>');
    $tagFormLi.append($removeFormA);

    $removeFormA.on('click', function(e) {
        // prevent the link from creating a "#" on the URL
        e.preventDefault();

        // remove the li for the tag form
        $tagFormLi.remove();
    });
}

var $collectionHolder;

// setup an "add a tag" link
var $addTagLink = $('<a href="#" class="add_tag_link">Add a new hole</a>');
var $newLinkLi = $('<li></li>').append($addTagLink);

jQuery(document).ready(function() {
    // Get the ul that holds the collection of wordDocHoles
    $collectionHolder = $('ul.wordDocHoles');

    // add a delete link to all of the existing tag form li elements
    $collectionHolder.find('li').each(function() {
        addHoleFormDeleteLink($(this));
    });

    // add the "add a tag" anchor and li to the wordDocHoles ul
    $collectionHolder.append($newLinkLi);

    // count the current form inputs we have (e.g. 2), use that as the new
    // index when inserting a new item (e.g. 2)
    $collectionHolder.data('index', $collectionHolder.find(':input').length);

    $addTagLink.on('click', function(e) {
        // prevent the link from creating a "#" on the URL
        e.preventDefault();

        // add a new tag form (see next code block)
        addHoleForm($collectionHolder, $newLinkLi);
    });

    // update the main docblock
    switchDoc(undefined);
});
</script>
{% endblock %}